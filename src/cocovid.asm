	NAM	CoCoVid
	TTL	Video player for CoCo3

LOAD	EQU	$0E00		Actual load address for binary

IRQADR	EQU	$5F66
FIRQADR	EQU	$5F68

VIDOFF	EQU	$FF90
PALOFF	EQU	$FFB0
SAMR1ST	EQU	$FFD9

* Frame step value should be 2x actual frame step for 30fps source video
FRAMSTP	EQU	8

* 324 for 11025Hz...
TIMEVAL	EQU	648

	ORG	LOAD

EXEC	EQU	*

* Disable IRQ and FIRQ
	ORCC	#$50
* Disable PIA0 IRQ generation
	LDX	#$FF00
	LDA	1,X
	ANDA	#$3E
	STA	1,X
	LDA	,X
	LDA	3,X
	ANDA	#$3E
	STA	3,X
	LDA	2,X
* Disable PIA1 FIRQ generation
	LDX	#$FF20
	LDA	1,X
	ANDA	#$3E
	STA	1,X
	LDA	,X
	LDA	3,X
	ANDA	#$3E
	STA	3,X
	LDA	2,X

* High-speed poke...definitely...
	STA	SAMR1ST

* Setup palette...
	LDX	#PALINIT
	LDY	#PALOFF
PINTLOP	LDA	,X+
	STA	,Y+
	CMPX	#ENDPINT
	BNE	PINTLOP

* ...clear screen...
	LDX	#$2000
	CLRA
CLRSCN	STA	,X+
* Check for $3840 to account for stray half-line at bottom of screen
	CMPX	#$3840
	BNE	CLRSCN

* ...and setup video mode
	LDX	#VIDINIT
	LDY	#VIDOFF
VINTLOP	LDA	,X+
	STA	,Y+
	CMPX	#ENDVINT
	BNE	VINTLOP

* Select DAC sound output
	LDA	$FF01
	ANDA	#$C7
	ORA	#$30
	STA	$FF01
	LDA	$FF03
	ANDA	#$C7
	ORA	#$30
	STA	$FF03

* Enable sound output
	LDA	$FF23
	ANDA	#$C7
	ORA	#$38
	STA	$FF23

* Clear audio buffer
	LDX	#$3800
	CLRA
CLRAUD	STA	,X+
	CMPX	#$4800
	BNE	CLRAUD

* Init audio buffer switching and video frame step
	LDA	#FRAMSTP
	STA	>STEPCNT
	CLR	>AUDFRM
	LDD	#$4000
	STD	>AUDPTR

* Init Vsync interrupt generation
	LDA	$FF92
	ORA	#$08
	STA	$FF92
	LDA	$FF90
	ORA	#$20
	STA	$FF90

* Init timer interrupt generation
	LDD	#TIMEVAL
	STD	$FF94
	LDA	$FF91
	ORA	#$20
	STA	$FF91
	LDA	$FF93
	ORA	#$20
	STA	$FF93
	LDA	$FF90
	ORA	#$10
	STA	$FF90

* Enable IRQ and FIRQ handling
	LDD	#VIDISR
	STD	IRQADR
	LDD	#SNDISR
	STD	FIRQADR
	ANDCC	#$AF

INLOOP	EQU *
* Data movement goes here
	LDX	#$2000
INLOP1	LDA	$FFE1
* Check for character available
	BNE	INLOP2
* Check for user stop request
	JSR	[$A000]
	BEQ	INLOP1
	CMPA	#$03
	BEQ	EXIT
	BRA	INLOP1
INLOP2	LDA	$FFE0
* Check for escape char
	TFR	A,B
	ANDB	#$C0
	CMPB	#$C0
	BEQ	PIXMWR
* Store data in video buffer
	STA	,X+
INLOP3	CMPX	#$3800
	BLT	INLOP1
* Audio data movement goes here
* Point at next audio frame
	LDD	>AUDPTR
	ANDA	#$78
	EORA	#$78
	CLRB
	TFR	D,X
INLOP4	LDA	$FFE1
* Check for character available
	BNE	INLOP5
* Check for user stop request
	JSR	[$A000]
	BEQ	INLOP4
	CMPA	#$03
	BEQ	EXIT
	BRA	INLOP4
INLOP5	LDA	$FFE0
* Convert 2x4-bit to 2x8-bit
	BMI	INLOP6
	LDY	#CLWLOTB
	BRA	INLOP7
INLOP6	EQU	*
	LDY	#CLWHITB
	ANDA	$#7F
INLOP7	EQU	*
	LDD	A,Y
* Store data in audio buffer
	STA	,X+
	STB	,X+
	TFR	X,D
	ANDA	#$07
*	CMPD	#$05BE
	CMPD	#$02E0
*
	BLT	INLOP4
* Synchronize!
	LDA	#FRAMSTP
* Wait for STEPCNT to reset
INLOP8	CMPA	>STEPCNT
	BNE	INLOP8
* Switch to next audio frame
	LDD	>AUDPTR
	ANDA	#$78
	EORA	#$78
	CLRB
	STD	>AUDPTR
	BRA	INLOOP

* Execute reset vector
EXIT	JMP	[$FFFE]

PIXMWR	TFR	A,B
	ANDB	#$3F
PIXMWR1	LDA	$FFE1
	BEQ	PIXMWR1
	LDA	$FFE0
PIXMWR2	STA	,X+
	DECB
	BNE	PIXMWR2
	JMP	INLOP3

* Clear Vsync interrupt
VIDISR	LDB	$FF92
* Account for frame timing
	DEC	>STEPCNT
	BNE	VIDISR1
* Reset frame skip count
	LDA	#FRAMSTP
	STA	>STEPCNT
VIDISR1	RTI

* Read samples and stuff them into the DAC
SNDISR	PSHS	A,B,X
* Clear timer interrupt
	LDA	$FF93
* Load and play sample
	LDX	>AUDPTR
	LDA	,X+
	STA	$FF20
	TFR	X,D
	ANDA	#$07
*	CMPD	#$05BE
	CMPD	#$02E0
*
	BLT	SNDISR2
	CLRA
	BRA	SNDISR3
SNDISR2 EQU	*
	STX	>AUDPTR
SNDISR3 EQU	*
	PULS	A,B,X
	RTI

* Init for video mode, set video buffer to $2000
* (Assumes default MMU setup...)
VIDINIT	FCB	$4C,$00,$00,$00,$00,$00,$00,$00
	FCB	$82,$12,$00,$00,$0F,$E4,$00,$00
ENDVINT	EQU	*

* Init for palette regs
PALINIT	FCB	$00,$08,$10,$18,$20,$28,$30,$38
	FCB	$07,$0F,$17,$1F,$27,$2F,$37,$3F
ENDPINT	EQU	*

CLWLOTB	FDB	$0A0A,$0A0E,$0A12,$0A16,$0A1E,$0A26,$0A2E,$0A36
	FDB	$0A46,$0A56,$0A66,$0A76,$0A96,$0AB6,$0AD6,$0AF6
	FDB	$0E0A,$0E0E,$0E12,$0E16,$0E1E,$0E26,$0E2E,$0E36
	FDB	$0E46,$0E56,$0E66,$0E76,$0E96,$0EB6,$0ED6,$0EF6
	FDB	$120A,$120E,$1212,$1216,$121E,$1226,$122E,$1236
	FDB	$1246,$1256,$1266,$1276,$1296,$12B6,$12D6,$12F6
	FDB	$160A,$160E,$1612,$1616,$161E,$1626,$162E,$1636
	FDB	$1646,$1656,$1666,$1676,$1696,$16B6,$16D6,$16F6
	FDB	$1E0A,$1E0E,$1E12,$1E16,$1E1E,$1E26,$1E2E,$1E36
	FDB	$1E46,$1E56,$1E66,$1E76,$1E96,$1EB6,$1ED6,$1EF6
	FDB	$260A,$260E,$2612,$2616,$261E,$2626,$262E,$2636
	FDB	$2646,$2656,$2666,$2676,$2696,$26B6,$26D6,$26F6
	FDB	$2E0A,$2E0E,$2E12,$2E16,$2E1E,$2E26,$2E2E,$2E36
	FDB	$2E46,$2E56,$2E66,$2E76,$2E96,$2EB6,$2ED6,$2EF6
	FDB	$360A,$360E,$3612,$3616,$361E,$3626,$362E,$3636
	FDB	$3646,$3656,$3666,$3676,$3696,$36B6,$36D6,$36F6

CLWHITB	FDB	$460A,$460E,$4612,$4616,$461E,$4626,$462E,$4636
	FDB	$4646,$4656,$4666,$4676,$4696,$46B6,$46D6,$46F6
	FDB	$560A,$560E,$5612,$5616,$561E,$5626,$562E,$5636
	FDB	$5646,$5656,$5666,$5676,$5696,$56B6,$56D6,$56F6
	FDB	$660A,$660E,$6612,$6616,$661E,$6626,$662E,$6636
	FDB	$6646,$6656,$6666,$6676,$6696,$66B6,$66D6,$66F6
	FDB	$760A,$760E,$7612,$7616,$761E,$7626,$762E,$7636
	FDB	$7646,$7656,$7666,$7676,$7696,$76B6,$76D6,$76F6
	FDB	$960A,$960E,$9612,$9616,$961E,$9626,$962E,$9636
	FDB	$9646,$9656,$9666,$9676,$9696,$96B6,$96D6,$96F6
	FDB	$B60A,$B60E,$B612,$B616,$B61E,$B626,$B62E,$B636
	FDB	$B646,$B656,$B666,$B676,$B696,$B6B6,$B6D6,$B6F6
	FDB	$D60A,$D60E,$D612,$D616,$D61E,$D626,$D62E,$D636
	FDB	$D646,$D656,$D666,$D676,$D696,$D6B6,$D6D6,$D6F6
	FDB	$F60A,$F60E,$F612,$F616,$F61E,$F626,$F62E,$F636
	FDB	$F646,$F656,$F666,$F676,$F696,$F6B6,$F6D6,$F6F6

STEPCNT	RMB	1
AUDFRM	RMB	1
AUDPTR	RMB	2

	END	EXEC
