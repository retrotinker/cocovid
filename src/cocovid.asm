	NAM	CoCoVid
	TTL	Video player for CoCo3

LOAD	EQU	$0E00		Actual load address for binary

IRQADR	EQU	$5F66
FIRQADR	EQU	$5F68

VIDOFF	EQU	$FF90
PALOFF	EQU	$FFB0
SAMR1ST	EQU	$FFD9

* Frame step value should be 2x actual frame step for 30fps source video
FRAMSTP	EQU	8

* 324 for 11025Hz...
TIMEVAL	EQU	648

	ORG	LOAD

EXEC	EQU	*

* Disable IRQ and FIRQ
	ORCC	#$50
* Disable PIA0 IRQ generation
	LDX	#$FF00
	LDA	1,X
	ANDA	#$3E
	STA	1,X
	LDA	,X
	LDA	3,X
	ANDA	#$3E
	STA	3,X
	LDA	2,X
* Disable PIA1 FIRQ generation
	LDX	#$FF20
	LDA	1,X
	ANDA	#$3E
	STA	1,X
	LDA	,X
	LDA	3,X
	ANDA	#$3E
	STA	3,X
	LDA	2,X

* High-speed poke...definitely...
	STA	SAMR1ST

* Setup palette...
	LDX	#PALINIT
	LDY	#PALOFF
PINTLOP	LDA	,X+
	STA	,Y+
	CMPX	#ENDPINT
	BNE	PINTLOP

* ...clear screen...
	LDX	#$2000
	CLRA
CLRSCN	STA	,X+
* Check for $3840 to account for stray half-line at bottom of screen
	CMPX	#$3840
	BNE	CLRSCN

* ...and setup video mode
	LDX	#VIDINIT
	LDY	#VIDOFF
VINTLOP	LDA	,X+
	STA	,Y+
	CMPX	#ENDVINT
	BNE	VINTLOP

* Select DAC sound output
	LDA	$FF01
	ANDA	#$C7
	ORA	#$30
	STA	$FF01
	LDA	$FF03
	ANDA	#$C7
	ORA	#$30
	STA	$FF03

* Enable sound output
	LDA	$FF23
	ANDA	#$C7
	ORA	#$38
	STA	$FF23

* Clear audio buffer
	LDX	#$3800
	CLRA
CLRAUD	STA	,X+
	CMPX	#$4800
	BNE	CLRAUD

* Init audio buffer switching and video frame step
	LDA	#FRAMSTP
	STA	>STEPCNT
	CLR	>AUDFRM
	LDD	#$4000
	STD	>AUDPTR

* Init Vsync interrupt generation
	LDA	$FF92
	ORA	#$08
	STA	$FF92
	LDA	$FF90
	ORA	#$20
	STA	$FF90

* Init timer interrupt generation
	LDD	#TIMEVAL
	STD	$FF94
	LDA	$FF91
	ORA	#$20
	STA	$FF91
	LDA	$FF93
	ORA	#$20
	STA	$FF93
	LDA	$FF90
	ORA	#$10
	STA	$FF90

* Enable IRQ and FIRQ handling
	LDD	#VIDISR
	STD	IRQADR
	LDD	#SNDISR
	STD	FIRQADR
	ANDCC	#$AF

INLOOP	EQU *
* Data movement goes here
	LDX	#$2000
INLOP1	LDA	$FFE1
* Check for character available
	BNE	INLOP2
* Check for user stop request
	JSR	[$A000]
	BEQ	INLOP1
	CMPA	#$03
	BEQ	EXIT
	BRA	INLOP1
INLOP2	LDA	$FFE0
* Check for escape char
	TFR	A,B
	ANDB	#$C0
	CMPB	#$C0
	BEQ	PIXMWR
* Store data in video buffer
	STA	,X+
INLOP3	CMPX	#$3800
	BLT	INLOP1
* Audio data movement goes here
* Point at next audio frame
	LDD	>AUDPTR
	ANDA	#$78
	EORA	#$78
	CLRB
	TFR	D,X
INLOP4	LDA	$FFE1
* Check for character available
	BNE	INLOP5
* Check for user stop request
	JSR	[$A000]
	BEQ	INLOP4
	CMPA	#$03
	BEQ	EXIT
	BRA	INLOP4
INLOP5	LDA	$FFE0
* Convert 2x4-bit to 2x8-bit
	BMI	INLOP6
	LDY	#CLWLOTB
	BRA	INLOP7
INLOP6	EQU	*
	LDY	#CLWHITB
	ANDA	$#7F
INLOP7	EQU	*
	LDD	A,Y
* Store data in audio buffer
	STA	,X+
	STB	,X+
	TFR	X,D
	ANDA	#$07
*	CMPD	#$05BE
	CMPD	#$02E0
*
	BLT	INLOP4
* Synchronize!
	LDA	#FRAMSTP
* Wait for STEPCNT to reset
INLOP8	CMPA	>STEPCNT
	BNE	INLOP8
* Switch to next audio frame
	LDD	>AUDPTR
	ANDA	#$78
	EORA	#$78
	CLRB
	STD	>AUDPTR
	BRA	INLOOP

* Execute reset vector
EXIT	JMP	[$FFFE]

PIXMWR	TFR	A,B
	ANDB	#$3F
PIXMWR1	LDA	$FFE1
	BEQ	PIXMWR1
	LDA	$FFE0
PIXMWR2	STA	,X+
	DECB
	BNE	PIXMWR2
	JMP	INLOP3

* Clear Vsync interrupt
VIDISR	LDB	$FF92
* Account for frame timing
	DEC	>STEPCNT
	BNE	VIDISR1
* Reset frame skip count
	LDA	#FRAMSTP
	STA	>STEPCNT
VIDISR1	RTI

* Read samples and stuff them into the DAC
SNDISR	PSHS	A,B,X
* Clear timer interrupt
	LDA	$FF93
* Load and play sample
	LDX	>AUDPTR
	LDA	,X+
	STA	$FF20
	TFR	X,D
	ANDA	#$07
*	CMPD	#$05BE
	CMPD	#$02E0
*
	BLT	SNDISR2
	CLRA
	BRA	SNDISR3
SNDISR2 EQU	*
	STX	>AUDPTR
SNDISR3 EQU	*
	PULS	A,B,X
	RTI

* Init for video mode, set video buffer to $2000
* (Assumes default MMU setup...)
VIDINIT	FCB	$4C,$00,$00,$00,$00,$00,$00,$00
	FCB	$82,$12,$00,$00,$0F,$E4,$00,$00
ENDVINT	EQU	*

* Init for palette regs
PALINIT	FCB	$00,$08,$10,$18,$20,$28,$30,$38
	FCB	$07,$0F,$17,$1F,$27,$2F,$37,$3F
ENDPINT	EQU	*

CLWLOTB	FDB	$0000,$0040,$0060,$0070,$0078,$007C,$007E,$007F
	FDB	$0080,$0081,$0083,$0087,$008F,$009F,$00BF,$00FF
	FDB	$4000,$4040,$4060,$4070,$4078,$407C,$407E,$407F
	FDB	$4080,$4081,$4083,$4087,$408F,$409F,$40BF,$40FF
	FDB	$6000,$6040,$6060,$6070,$6078,$607C,$607E,$607F
	FDB	$6080,$6081,$6083,$6087,$608F,$609F,$60BF,$60FF
	FDB	$7000,$7040,$7060,$7070,$7078,$707C,$707E,$707F
	FDB	$7080,$7081,$7083,$7087,$708F,$709F,$70BF,$70FF
	FDB	$7800,$7840,$7860,$7870,$7878,$787C,$787E,$787F
	FDB	$7880,$7881,$7883,$7887,$788F,$789F,$78BF,$78FF
	FDB	$7C00,$7C40,$7C60,$7C70,$7C78,$7C7C,$7C7E,$7C7F
	FDB	$7C80,$7C81,$7C83,$7C87,$7C8F,$7C9F,$7CBF,$7CFF
	FDB	$7E00,$7E40,$7E60,$7E70,$7E78,$7E7C,$7E7E,$7E7F
	FDB	$7E80,$7E81,$7E83,$7E87,$7E8F,$7E9F,$7EBF,$7EFF
	FDB	$7F00,$7F40,$7F60,$7F70,$7F78,$7F7C,$7F7E,$7F7F
	FDB	$7F80,$7F81,$7F83,$7F87,$7F8F,$7F9F,$7FBF,$7FFF

CLWHITB	FDB	$8000,$8040,$8060,$8070,$8078,$807C,$807E,$807F
	FDB	$8080,$8081,$8083,$8087,$808F,$809F,$80BF,$80FF
	FDB	$8100,$8140,$8160,$8170,$8178,$817C,$817E,$817F
	FDB	$8180,$8181,$8183,$8187,$818F,$819F,$81BF,$81FF
	FDB	$8300,$8340,$8360,$8370,$8378,$837C,$837E,$837F
	FDB	$8380,$8381,$8383,$8387,$838F,$839F,$83BF,$83FF
	FDB	$8700,$8740,$8760,$8770,$8778,$877C,$877E,$877F
	FDB	$8780,$8781,$8783,$8787,$878F,$879F,$87BF,$87FF
	FDB	$8F00,$8F40,$8F60,$8F70,$8F78,$8F7C,$8F7E,$8F7F
	FDB	$8F80,$8F81,$8F83,$8F87,$8F8F,$8F9F,$8FBF,$8FFF
	FDB	$9F00,$9F40,$9F60,$9F70,$9F78,$9F7C,$9F7E,$9F7F
	FDB	$9F80,$9F81,$9F83,$9F87,$9F8F,$9F9F,$9FBF,$9FFF
	FDB	$BF00,$BF40,$BF60,$BF70,$BF78,$BF7C,$BF7E,$BF7F
	FDB	$BF80,$BF81,$BF83,$BF87,$BF8F,$BF9F,$BFBF,$BFFF
	FDB	$FF00,$FF40,$FF60,$FF70,$FF78,$FF7C,$FF7E,$FF7F
	FDB	$FF80,$FF81,$FF83,$FF87,$FF8F,$FF9F,$FFBF,$FFFF

STEPCNT	RMB	1
AUDFRM	RMB	1
AUDPTR	RMB	2

	END	EXEC
