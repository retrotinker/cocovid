#!/bin/sh

AUDIORATE=11040
VIDEORATE=60

INPUTVBR=200000
INPUTAR=44100

cleanup()
{
	rm -rf $TMPDIR >/dev/null 2>&1
	kill -HUP $PPMPID >/dev/null 2>&1
	kill -HUP $PCMPID >/dev/null 2>&1
	kill -HUP $WATCHPID >/dev/null 2>&1

	exit 0
}

MODE=$3

if [ -z "$4" ]
then
	MAXSCORE=832
else
	MAXSCORE=$4
fi

SAMPLES=$(($AUDIORATE / $VIDEORATE))

BINDIR=$(dirname $0)

PPM2FRM=${BINDIR}/ppm2frm${MODE}
FRM2RAW=${BINDIR}/frm2raw${MODE}
WATCHOUT=${BINDIR}/watchout

TMPDIR=$(mktemp -d)

# Designate storage for "status" frame...
CURRAW=${TMPDIR}/current.raw
TMPRAW=${TMPDIR}/tmp.raw

# START HERE

trap cleanup 1 2 3 15

#
# Image conversion for error correcting dither option
#	# for 128x192
#	RESIZE_RESOLUTION="80x120"
#	# for 128x96
#	RESIZE_RESOLUTION="80x60"
#	DITHER_OPTS="-quantize YIQ -dither FloydSteinberg \
#			-map ${BINDIR}/colormap.ppm"
# Image conversion for posterization option
#	DITHER_OPTS="-quantize YIQ +dither \
#			-map ${BINDIR}/colormap.ppm"
# Image conversion for monochrome option
#	DITHER_OPTS="-monochrome"
# Image conversion for ordered dither option (4- or 16-colors)
#	DITHER_OPTS="-ordered-dither o8x8,4,4,4"
# Image conversion for ordered dither option (256-colors)
#	DITHER_OPTS="-ordered-dither o8x8,8,8,8"
#
if [ x$MODE == x0 ]
then
	RESOLUTION="128x96"
	RESIZE_OPTS="110x100%!"
	RESIZE_RESOLUTION=$RESOLUTION
	DITHER_OPTS="-ordered-dither o8x8,4,4,4"
elif [ x$MODE == x1 ]
then
	RESOLUTION="128x192"
	RESIZE_OPTS="110x200%!"
	RESIZE_RESOLUTION=$RESOLUTION
	DITHER_OPTS="-ordered-dither o8x8,4,4,4"
elif [ x$MODE == x2 ]
then
	RESOLUTION="128x96"
	RESIZE_OPTS="110x100%!"
	RESIZE_RESOLUTION=$RESOLUTION
	DITHER_OPTS="-ordered-dither o8x8,8,8,8"
elif [ x$MODE == x3 ]
then
	RESOLUTION="128x192"
	RESIZE_OPTS="110x200%!"
	RESIZE_RESOLUTION=$RESOLUTION
	DITHER_OPTS="+dither -colors 2 -colorspace gray -normalize"
elif [ x$MODE == x4 ]
then
	RESOLUTION="256x192"
	RESIZE_OPTS="110x100%!"
	RESIZE_RESOLUTION=$RESOLUTION
	DITHER_OPTS="+dither -colors 2 -colorspace gray -normalize"
elif [ x$MODE == x5 ]
then
	RESOLUTION="128x96"
	RESIZE_OPTS="110x100%!"
	RESIZE_RESOLUTION=$RESOLUTION
	DITHER_OPTS="-ordered-dither o8x8,4,4,4"
elif [ x$MODE == x6 ]
then
	RESOLUTION="128x96"
	RESIZE_OPTS="110x100%!"
	RESIZE_RESOLUTION=$RESOLUTION
	DITHER_OPTS="-ordered-dither o8x8,4,4,4"
elif [ x$MODE == x7 ]
then
	RESOLUTION="128x192"
	RESIZE_OPTS="110x200%!"
	RESIZE_RESOLUTION=$RESOLUTION
	DITHER_OPTS="-ordered-dither o8x8,4,4,4"
else
	echo "Unknown video mode ${MODE}!"
	exit 1
fi

# Start with all-black frame...
cp ${BINDIR}/BLACK.raw $CURRAW

# Determine size of each PPM file...
ffmpeg -i "$1" -r $VIDEORATE -b $INPUTVBR -ss 0 -vframes 1 \
	-y ${TMPDIR}/input.ppm 2>/dev/null

PPMSIZE=$(stat -c %s ${TMPDIR}/input.ppm)

# Make FIFO used for PPM data source and feed it from ffmpeg...
mkfifo ${TMPDIR}/ppmfifo

ffmpeg -i "$1" -r $VIDEORATE -b $INPUTVBR -an -vcodec ppm \
	-f image2pipe - 2>/dev/null > ${TMPDIR}/ppmfifo &
PPMPID=$!
PPMBLOCKSIZE=$(stat -c '%o' ${TMPDIR}/ppmfifo)
exec 3< ${TMPDIR}/ppmfifo

# Make FIFO used for PCM data source and feed it from ffmpeg...
mkfifo ${TMPDIR}/pcmfifo

ffmpeg -i "$1" -vn -ar $INPUTAR -ac 1 -acodec pcm_u8 \
		-f u8 - 2>/dev/null | \
	sox -t raw -r $INPUTAR -c 1 -b 8 -e unsigned - \
		-t raw - -D norm lowpass $((AUDIORATE / 2)) 2>/dev/null | \
	sox -t raw -r $INPUTAR -c 1 -b 8 -e unsigned - \
		-t raw - -D rate $AUDIORATE 2>/dev/null \
		> ${TMPDIR}/pcmfifo &
PCMPID=$!
PCMBLOCKSIZE=$(stat -c '%o' ${TMPDIR}/pcmfifo)
if [ $SAMPLES -gt $PCMBLOCKSIZE ]
then
	# If this message fires, than the dd command for the PCM audio data
	# needs to be refactored to look like the one for the video data...
	echo "PCM sample size \($SAMPLES\) is greater than the PCM data" >&2
	echo "FIFO block size!  Script may not run correctly..." >&2
fi
exec 4< ${TMPDIR}/pcmfifo

# Make FIFO used for feedback of frame update to "status" frame...
mkfifo ${TMPDIR}/frmfifo

echo Transcoding ${1}...

$WATCHOUT $MODE $TMPDIR &
WATCHPID=$!

cat ${BINDIR}/START.frm > "$2".out
dd if=/dev/zero bs=$SAMPLES count=1 2>/dev/null >> "$2".out

i=1

while true
do
	if [ $(($i % ($VIDEORATE *10))) -eq 1 ]
	then
		echo Processing frame ${i}... \($(date)\) >&2
	fi

	dd of=${TMPDIR}/input.ppm count=$(($PPMSIZE / $PPMBLOCKSIZE)) \
		bs=$PPMBLOCKSIZE <&3 2>/dev/null
	dd count=1 bs=$(($PPMSIZE % $PPMBLOCKSIZE)) \
		<&3 >> ${TMPDIR}/input.ppm 2>/dev/null
	if [ $(stat -c '%s' ${TMPDIR}/input.ppm) -lt $PPMSIZE ]
	then
		break
	fi

	$FRM2RAW $CURRAW ${TMPDIR}/frmfifo $TMPRAW &
	CURUPDATE=$!
	convert -resize ${RESIZE_OPTS} \
			-resize ${RESIZE_RESOLUTION} \
			${DITHER_OPTS} \
			-gravity center -extent ${RESOLUTION} \
			-background black \
			${TMPDIR}/input.ppm ppm:- | \
		$PPM2FRM - $CURRAW $MAXSCORE - | \
		tee ${TMPDIR}/frmfifo
	wait $CURUPDATE
	mv $TMPRAW $CURRAW

# Alternative method for reading/slicing PCM stream...
#	dd of=${TMPDIR}/input.pcm count=$(($SAMPLES / $PCMBLOCKSIZE)) \
#		bs=$PCMBLOCKSIZE <&4 2>/dev/null
#	dd count=1 bs=$(($SAMPLES % $PCMBLOCKSIZE)) \
#		<&4 >> ${TMPDIR}/input.pcm 2>/dev/null
# Above is more "correct" but this will be slightly faster, provided that
# ${SAMPLES} is less than ${PCMBLOCKSIZE}...
	dd bs=$SAMPLES count=1 of=${TMPDIR}/input.pcm <&4 2>/dev/null
	cat ${TMPDIR}/input.pcm
	PCMSIZE=$(stat -c '%s' ${TMPDIR}/input.pcm)
	if [ $PCMSIZE -lt $SAMPLES ]
	then
		dd if=/dev/zero bs=$(($SAMPLES - $PCMSIZE)) \
			count=1 2>/dev/null
	fi

	i=$((i+1))
done >> "$2".out

echo Done!

cleanup
